-- 트리거-KMK-실습.spl

DROP TABLE EMP;

CREATE TABLE EMP(
	EMP_ID NUMBER PRIMARY KEY,
	EMP_NAME NVARCHAR2(200) NOT NULL,
	EMP_SALARY NUMBER,
	EMP_COMM_PCT NUMBER
);

DROP SEQUENCE SEQ_EMP;

CREATE SEQUENCE SEQ_EMP;

INSERT INTO EMP VALUES(SEQ_EMP.NEXTVAL, '홍길동', 10000, 0.25);
INSERT INTO EMP VALUES(SEQ_EMP.NEXTVAL, '강감찬', 8000, 0.15);
INSERT INTO EMP VALUES(SEQ_EMP.NEXTVAL, '이순신', 6000, 0.05);

SELECT * FROM EMP;

-- 1) 급여 삭감 방지 트리거 TRG_UPDATE_SALARY 생성 후 작동 확인
-- 1.
CREATE OR REPLACE TRIGGER TRG_UPDATE_SALARY
BEFORE
UPDATE ON EMP
FOR EACH ROW
BEGIN
	IF UPDATING THEN
	RAISE_APPLICATION_ERROR(-20666, 'EMP 급여 삭감 금지!');
	END IF;
END;

UPDATE EMP SET EMP_SALARY = 5000 WHERE EMP_ID=1;

-- 2.
CREATE OR REPLACE TRIGGER TRG_UPDATE_SALARY
BEFORE
UPDATE OF EMP_SALARY ON EMP
FOR EACH ROW
BEGIN
	IF :NEW.EMP_SALARY < :OLD.EMP_SALARY THEN
	RAISE_APPLICATION_ERROR(-20666, 'EMP 급여 삭감 금지!');
	END IF;
END;

-- 2) 직원 데이터 추가 및 삭제 로그 트리거 TRG_EMP 생성 후 작동 확인
--    로그테이블 생성 : LOG_EMP (EMP_ID, EMP_NAME, DML, WORK_ID, LOG_DATE)
--                   DML:INSERT, DELETE, WORK_ID: 추가 및 삭제된 직원 아이디

CREATE TABLE LOG_EMP(
	EMP_ID NUMBER PRIMARY KEY,
	EMP_NAME NVARCHAR2(200) NOT NULL,
	DML VARCHAR2(10),
	WORK_ID NUMBER,
	LOG_DATE DATE
);

SELECT * FROM LOG_EMP;

SELECT * FROM EMP;

DROP SEQUENCE SEQ_LOG_EMP;
CREATE SEQUENCE SEQ_LOG_EMP;

DROP TRIGGER TRG_EMP;

CREATE OR REPLACE TRIGGER TRG_EMP
AFTER
INSERT OR DELETE ON EMP
FOR EACH ROW
BEGIN
   IF INSERTING THEN
      INSERT INTO LOG_EMP
      VALUES(SEQ_LOG_EMP.NEXTVAL, :NEW.EMP_NAME, 'INSERT', :NEW.EMP_ID, SYSDATE);
   ELSIF DELETING THEN
      INSERT INTO LOG_EMP
      VALUES(SEQ_LOG_EMP.NEXTVAL, :OLD.EMP_NAME, 'DELETE', :OLD.EMP_ID, SYSDATE);   
   END IF;
END;

INSERT INTO EMP VALUES(6, '홀길동', 15000, 0.35);
COMMIT;
SELECT * FROM EMP;
SELECT * FROM LOG_EMP;

DELETE EMP WHERE EMP_ID=7;
COMMIT;
SELECT * FROM EMP;
SELECT * FROM LOG_EMP;


-- 3) 신규 직원 추가시 기본 커미션(0.05) 부여 트리거 TRG_COMM_PCT 생성 후 작동 확인'
DROP TRIGGER TRG_COMM_PCT;

CREATE OR REPLACE TRIGGER TRG_COMM_PCT
BEFORE
INSERT ON EMP
FOR EACH ROW
BEGIN
	:NEW.EMP_COMM_PCT := 0.05
END;

INSERT INTO EMP VALUES(SEQ_EMP.NEXTVAL, '길동이', 20000, 0);

SELECT * FROM EMP;

-- 4) 급여 변경 이력관리 트리거 TRG_HISTORY_SALARY 생성 후 작동 확인
--     로그테이블 생성 : LOG_HISTORY_SALARY (EMP_ID, EMP_NAME, WORK, LOG_DATE)
--                           WORK:변경전급여와 변경후급여 내역
CREATE TABLE LOG_HISTORY_SALARY(
	EMP_ID NUMBER PRIMARY KEY,
	EMP_NAME NVARCHAR2(200) NOT NULL,
	WORK NUMBER,
	LOG_DATE DATE
);

CREATE SEQUENCE SEQ_LOG_HISTORY;

SELECT * FROM LOG_HISTORY_SALARY;

DROP TRIGGER TRG_HISTORY_SALARY;

CREATE OR REPLACE TRIGGER TRG_HISTORY_SALARY
AFTER
UPDATE ON EMP
FOR EACH ROW
BEGIN
	IF UPDATING THEN
	INSERT INTO LOG_HISTORY_SALARY
	VALUES(:OLD.EMP_ID, :OLD.EMP_NAME, :OLD.EMP_SALARY||'>'||:NEW.EMP_SALARY, SYSDATE);
	END IF;
END;

UPDATE EMP SET EMP_SALARY=3000 WHERE EMP_ID=4;
SELECT * FROM EMP;
SELECT * FROM LOG_HISTORY_SALARY;

-- 5) EMP테이블의 백업 트리거 TRG_BK_EMP : 항상 EMP테이블과 동일한 데이터 유지하도록
--     백업테이블 생성 : BK_EMP (EMP_ID, EMP_NAME, EMP_SALARY, EMP_COMM_PCT)
CREATE TABLE BK_EMP
AS
SELECT * FROM EMP
WHERE 1 = 1;

DROP TRIGGER TRG_BK_EMP;

CREATE OR REPLACE TRIGGER TRG_BK_EMP
AFTER
INSERT OR UPDATE OR DELETE ON EMP
FOR EACH ROW
BEGIN
	IF INSERTING THEN
	INSERT INTO BK_EMP
	VALUES(:NEW.EMP_ID, :NEW.EMP_NAME, :NEW.EMP_SALARY, :NEW.EMP_COMM_PCT);
	ELSIF UPDATING THEN
	UPDATE BK_EMP
	SET 
		BK_EMP.EMP_NAME = :NEW.EMP_NAME,  
		BK_EMP.EMP_SALARY = :NEW.EMP_SALARY, 
		BK_EMP.EMP_COMM_PCT = :NEW.EMP_COMM_PCT
	WHERE BK_EMP.EMP_ID = :OLD.EMP_ID;
	ELSIF DELETING THEN
	DELETE BK_EMP WHERE BK_EMP.EMP_ID = :OLD.EMP_ID;
	END IF;
END;

SELECT * FROM EMP;

INSERT INTO EMP VALUES(9, '최율', 5000, 0.05);
UPDATE EMP SET EMP_SALARY = 1000, EMP_NAME = '길동이' WHERE EMP_ID = 8;
DELETE EMP WHERE EMP_ID = 9;


--ALTER TRIGGER TRG_BK_EMP DISABLE;
--ALTER TRIGGER TRG_COMM_PCT ENABLE;












