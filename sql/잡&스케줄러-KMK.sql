-- 잡&스케줄러-KMK.sql

-- DBMS_JOB 패키지
-- 오라클에서 정해진 시간마다 어떤 작업을 자동으로 수행하기 위해 사용
-- 백업, 데이터 감사(AUDIT), 데이터 분리/가공 작업에 주로 사용됨
-- SQL, PL/SQL만 주기적으로 수행 가능

-- 로그 저장을 위한 테이블 생성
CREATE TABLE TBL_LOG(
	LOGSEQ NUMBER PRIMARY KEY,
	LOGCONTENT NVARCHAR2(2000),
	LOGDATE DATE
);

-- 시퀀스 생성
CREATE SEQUENCE SEQ_TBL_LOG;

-- 작업 프로시져
CREATE OR REPLACE PROCEDURE PROC_JOB
IS
BEGIN
	INSERT INTO TBL_LOG
	VALUES(SEQ_TBL_LOG.NEXTVAL, 'LOG'||SYSDATE, SYSDATE);
END;

-- 잡을 등록하고 실행
DECLARE
	-- 오라클이 만들어서 부여하는 잡 번호를 저장할 변수
	V_JOB_NO NUMBER;
BEGIN
	DBMS_JOB.SUBMIT(
		JOB => V_JOB_NO, --잡번호
		WHAT => 'PROC_JOB;', -- 수행할 프로시져 (; 필수)
		NEXT_DATE => SYSDATE, -- 잡 시작 시점
		INTERVAL => 'SYSDATE + 5/60/60/24' -- 잡 수행 간격 5초
	);
	COMMIT;
END;

SELECT COUNT(*) FROM TBL_LOG;

-- 잡 정보 조회
SELECT * FROM USER_JOBS;

-- 잡 일시중지
BEGIN
	DBMS_JOB.BROKEN(1, TRUE); -- 잡번호, 중지여부
END;

-- 잡 재개
BEGIN
	DBMS_JOB.BROKEN(3, FALSE); -- 잡번호, 중지여부
END;

-- 잡 속성 변경
BEGIN
	DBMS_JOB.CHANGE(
		JOB => 1, -- 잡번호
		WHAT => 'PROC_JOB;',
		NEXT_DATE => SYSDATE, 
		INTERVAL => 'SYSDATE + 3/60/60/24'
	);
END;

SELECT COUNT(*) FROM TBL_LOG;

-- 실습) 5초마다 PERSON테이블에 데이터를 한 건 등록하는 잡을 생성하고 실행
-- 10초마다 PERSON테이블을 PERSON_BK라는 테이블에 백업하는 잡을 생성하고 실행

-- PERSON 테이블 기존 데이터 삭제
TRUNCATE TABLE PERSON;
TRUNCATE TABLE PERSON_BK;

-- PERSON_BK 테이블 PERSON 구조만 생성
CREATE TABLE PERSON_BK
AS
SELECT * FROM PERSON WHERE 1=-1;

CREATE SEQUENCE SEQ_PERSON;

-- INSERT용 프로시져
CREATE OR REPLACE PROCEDURE PROC_INSERT
IS
BEGIN
	INSERT INTO PERSON
	VALUES(
		SEQ_PERSON.NEXTVAL, 
		'NAME'||SEQ_PERSON.CURRVAL,
		20, 
		'야구', 
		''||SEQ_PERSON.CURRVAL
	);
	COMMIT;
END;

BEGIN
	DBMS_JOB.REMOVE(2);
END;

DECLARE
	V_JOB_NO NUMBER;
BEGIN
	DBMS_JOB.SUBMIT(
		JOB => V_JOB_NO,
		WHAT => 'PROC_INSERT;',
		NEXT_DATE => SYSDATE,
		INTERVAL => 'SYSDATE + 5/60/60/24'
	);
	COMMIT;
END;

SELECT * FROM PERSON;
SELECT * FROM USER_JOBS;

-- 백업용 프로시져
CREATE OR REPLACE PROCEDURE PROC_PERSON_BK
IS
BEGIN
	DELETE PERSON_BK;
	INSERT INTO PERSON_BK
	SELECT * FROM PERSON;
	COMMIT;
END;

DECLARE
	V_JOB_NO NUMBER;
BEGIN
	DBMS_JOB.SUBMIT(
		JOB => V_JOB_NO,
		WHAT => 'PROC_PERSON_BK;',
		NEXT_DATE => SYSDATE,
		INTERVAL => 'SYSDATE + 10/60/60/24'
	);
	COMMIT;
END;

SELECT COUNT(*) FROM PERSON;
SELECT COUNT(*) FROM PERSON_BK;
SELECT * FROM USER_JOBS;

BEGIN
	DBMS_JOB.REMOVE(5);
	COMMIT;
END;


-- DBMS_SCHEDULER
-- 오라클에 주기적인 작업을 하기 위한 패키지
-- 시간 기반, 이벤트 기반
-- DBMS_JOB의 상위 버전, 좀 더 정교한 작업 스케줄링 가능
-- SQL과 PL/SQL, 외부 프로그램 수행도 가능
-- 프로그램 체인 : 잡 내에서 순차적으로 수행되는 프로그램

-- 권한 부여 (SYSTEM 계정)
-- CMD > SQLPLUS CONN AS SYSDBA;
-- SQLPLUS > GRANT CREATE JOB TO KMK;
-- SQLPLUS > GRANT MANAGE SCHEDULER TO KMK;
-- SQLPLUS > GRANT EXECUTE ON DBMS_SCHEDULER TO KMK; 
-- SQLPLUS > GRANT CREATE EXTERNAL JOB TO KMK;
-- SQLPLUS > CONN SYS AS SYSDBA (권한부여 안되면 SYS로 접속)

-- 프로그램 생성
BEGIN
	DBMS_SCHEDULER.CREATE_PROGRAM(
		PROGRAM_NAME => 'ORA_SCH_PROG', --프로그램명
		PROGRAM_TYPE => 'STORED_PROCEDURE', --프로그램타입
		PROGRAM_ACTION => 'PROG_JOB', -- 프로그램 작업(잡)
		COMMENTS => '오라클 스케쥴러 - 스케줄러(프로시져 사용)' -- 프로그램 주석
	);
END;

-- 프로그램 조회
SELECT * FROM USER_SCHEDULER_PROGRAMS;

-- 잡 생성
BEGIN
	DBMS_SCHEDULER.CREATE_JOB(
		JOB_NAME => 'ORA_SCH_JOB', --잡이름
		JOB_TYPE => 'STORED_PROCEDURE', -- 잡타입
		JOB_ACTION => 'PROC_JOB', -- 수행할 프로시져
		REPEAT_INTERVAL => 'FREQ=SECONDLY; INTERVAL=5', --반복 시간 간격
		COMMENTS => '오라클 스케줄러 - 잡' -- 잡 주석
	);	
END;

-- 스케줄러 잡 조회
SELECT * FROM USER_SCHEDULER_JOBS;

-- 스케줄러 잡 활성화
BEGIN
	DBMS_SCHEDULER.ENABLE('ORA_SCH_JOB');
END;

-- 스케줄러 잡 비활성화
BEGIN
	DBMS_SCHEDULER.DISABLE('ORA_SCH_JOB');
END;


TRUNCATE TABLE TBL_LOG;

SELECT COUNT(*) FROM TBL_LOG;


-- 잡 생성 (외부파일 실행)
BEGIN
	DBMS_SCHEDULER.CREATE_JOB(
		JOB_NAME => 'ORA_SCH_JOB2', --잡이름
		JOB_TYPE => 'EXECUTABLE', -- 잡타입
		JOB_ACTION => 'C:\Program Files\Google\Chrome\Application\chrome.exe', -- 수행할 프로그램
		REPEAT_INTERVAL => 'FREQ=SECONDLY; INTERVAL=5', --반복 시간 간격
		COMMENTS => '오라클 스케줄러 - 외부파일 실행' -- 잡 주석
	);	
END;


BEGIN
	DBMS_SCHEDULER.ENABLE('ORA_SCH_JOB2');
END;

BEGIN
	DBMS_SCHEDULER.DISABLE('ORA_SCH_JOB');
END;

-- 잡 확인
SELECT JOB_NAME, ENABLED FROM USER_SCHEDULER_JOBS;

-- 잡 삭제
BEGIN
	DBMS_SCHEDULER.DROP_JOB('ORA_SCH_JOB');
	DBMS_SCHEDULER.DROP_JOB('ORA_SCH_JOB2');
END;

















