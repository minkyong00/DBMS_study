-- 트랜잭션-KMK.sql

/*
TRANSACTION(트랜잭션)
- 모두 처리되거나 모두 처리되지 말아야 할 개별 작업들의 묶음, 단위
- COMMIT : 트랜잭션 완료 (= 데이터베이스에 영구 반영 = ROLLBACK 불가)
- ROLLBACK : 최종 커밋 이후 또는 특정 SAVEPOINT까지 돌아감
- SAVEPOINT : 롤백할 시점을 지정
*/

/*
[HONG이 KANG에게 5000원을 이체하는 이체 트랜잭션]
1. HONG 계좌에 10000원을 입금
2. 이체 트랜잭션
   2-1 HONG 계좌에서 5000원을 출금
   2-2 KANG 계좌에 5000원을 입금
# 이체 트랜잭션에서는 2-1작업과 2-2작업이 모두 일어나거나 모두 일어나지 말아야 함
# 만약 2-1작업만 수행되고 트랜잭션이 종료된다면 문제 발생!
*/

-- HONG 계좌 생성
CREATE TABLE HONG(
	MONEY NUMBER
);

CREATE TABLE KANG(
	MONEY NUMBER
);

-- HONG계좌에 10000원을 입금
INSERT INTO HONG VALUES(10000);
COMMIT;
SELECT * FROM HONG;

-- 이체 트랜잭션

-- 2-1. HONG 계좌에서 5000원을 출금
UPDATE HONG SET MONEY = MONEY - 5000;
SELECT * FROM HONG;
-- COMMIT : 하면 안됨!

-- 네트워크 장애등의 문제가 발생!!
ROLLBACK;

-- 2-2. KANG 계좌에 5000원을 입금
INSERT INTO KANG VALUES(5000);
SELECT * FROM KANG;

-- 출금과 입금까지 잘 수행되었다면
COMMIT;
SELECT * FROM HONG;
SELECT * FROM KANG;

-- HONG계좌에서 KANG계좌로 1000원씩 5번 이체
UPDATE HONG SET MONEY = MONEY - 1000;
UPDATE KANG SET MONEY = MONEY + 1000;
UPDATE HONG SET MONEY = MONEY - 1000;
UPDATE KANG SET MONEY = MONEY + 1000;
UPDATE HONG SET MONEY = MONEY - 1000;
UPDATE KANG SET MONEY = MONEY + 1000;
UPDATE HONG SET MONEY = MONEY - 1000;
UPDATE KANG SET MONEY = MONEY + 1000;
UPDATE HONG SET MONEY = MONEY - 1000;
UPDATE KANG SET MONEY = MONEY + 1000;
SELECT * FROM HONG;
SELECT * FROM KANG;
COMMIT;

-- KANG 계좌에서 HONG계좌로 2000원씩 3번 이체
UPDATE KANG SET MONEY = MONEY - 2000;
UPDATE HONG SET MONEY = MONEY + 2000;
UPDATE KANG SET MONEY = MONEY - 2000;
UPDATE HONG SET MONEY = MONEY + 2000;
UPDATE KANG SET MONEY = MONEY - 2000;
UPDATE HONG SET MONEY = MONEY + 2000;
COMMIT;
SELECT * FROM HONG;
SELECT * FROM KANG;

-- HONG계좌에서 KANG계좌로 2000원씩 3번 이체
-- 이체마다 SAVEPOINT 지정
UPDATE HONG SET MONEY = MONEY - 2000;
UPDATE KANG SET MONEY = MONEY + 2000;
SELECT * FROM HONG;
SELECT * FROM KANG;

SAVEPOINT SP1;

UPDATE HONG SET MONEY = MONEY - 2000;
UPDATE KANG SET MONEY = MONEY + 2000;
SELECT * FROM HONG;
SELECT * FROM KANG;

SAVEPOINT SP2;

UPDATE HONG SET MONEY = MONEY - 2000;
UPDATE KANG SET MONEY = MONEY + 2000;
SELECT * FROM HONG;
SELECT * FROM KANG;

SAVEPOINT SP3;

-- SP2로 ROLLBACK;
ROLLBACK TO SP2;

-- COMMIT;
SELECT * FROM HONG;
SELECT * FROM KANG;

/*
세션(Session)
- 데이터베이스 연결(접속)을 추상화한 개념, 한 사용자(계정)가 여러 세션을 가질 수 있음
- 예) 동일한 사용자 계정으로 SQLPLUS 2개 접속, DBEAVER로 2개 접속한다면 4개의 세션 존재  
*/


-- SQLPLUS로 이니셔 계정 세션을 2개 열기 
-- CMD > SQLPLUS KMK/KMK
-- CMD > SQLPLUS KMK/KMK
-- => 접속하고 있는 DBEAVER 세션이 하나 있으므로 총 3개의 세션이 열림

-- HONG 계좌를 초기화
UPDATE HONG SET MONEY = 10000;
COMMIT;

-- DBEAVER에서 HONG의 계좌에 10000원을 입금
SELECT * FROM HONG;
SELECT * FROM KANG;

UPDATE HONG SET MONEY = MONEY + 10000;
SELECT * FROM HONG; -- DBEAVER에서는 20000, SQLPLUS에서는 10000
COMMIT;
SELECT * FROM HONG; -- DBEAVER에서는 20000, SQLPLUS에서는 10000

-- 결론: COMMIT을 해야 다른 세션에도 결과가 반영됨 = COMMIT과 ROLLBACK은 세션 단위로 작동함

SELECT * FROM HONG;












