-- 트리거-CKY.sql

/*
TRIGGER (트리거)
- DBMS에 이벤트 발생시 발생한 이벤트 전/후에 자동으로 실행할 SQL의 모음
- 보안, 로깅, 백업 작업에 많이 사용됨
*/

-- 트리거를 활용한 백업

-- 원본 테이블
CREATE TABLE ORG_TABLE (
   OTNO NUMBER PRIMARY KEY,
   OTCONTENT NVARCHAR2(2000) NOT NULL
);

-- 백업 테이블 (ORG_TABLE의 구조만 복사해서 생성)
CREATE TABLE BK_TABLE
AS
SELECT * FROM ORG_TABLE
WHERE 1 = -1; -- 절대 FALSE인 조건

-- 백업 트리거 생성
CREATE OR REPLACE TRIGGER BK_TRIGGER
AFTER -- 트리거링 시점 : ORG_TABLE에 INSERT가 일어난 후
INSERT ON ORG_TABLE -- 트리거링 원인 작업 : ORG_TABLE에 INSERT가 일어나면
FOR EACH ROW -- INSERT된 모든 행에 대해서
BEGIN
   -- :OLD : 기존 데이터
   -- :NEW : 새로운 데이터
   INSERT INTO BK_TABLE VALUES (:NEW.OTNO, :NEW.OTCONTENT);
END;

SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;

INSERT INTO ORG_TABLE VALUES(1, '컨텐츠1');
INSERT INTO ORG_TABLE VALUES(2, '컨텐츠2');
INSERT INTO ORG_TABLE VALUES(3, '컨텐츠3');
COMMIT;

SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;


-- 트리거를 활용한 로깅

CREATE TABLE LOG_TABLE(
   LOG_NO NUMBER PRIMARY KEY, -- 로그 일련번호
   TBL_NAME VARCHAR2(100) NOT NULL, -- 테이블명
   DML VARCHAR2(10), -- 수행된 작업
   CONTENT NVARCHAR2(200), -- 작업 상세
   LOG_DATE DATE -- 로그 일시
);

CREATE SEQUENCE SEQ_LOG;

-- 로깅 트리거 생성
CREATE OR REPLACE TRIGGER LOG_TRIGGER
AFTER
INSERT OR UPDATE OR DELETE ON ORG_TABLE
FOR EACH ROW
BEGIN
   IF INSERTING THEN -- INSERT 작업 이라면
      INSERT INTO LOG_TABLE
      VALUES(SEQ_LOG.NEXTVAL, 'ORG_TABLE', 'INSERT', :NEW.OTCONTENT, SYSDATE);
   ELSIF UPDATING THEN -- UPDATE 작업 이라면
      INSERT INTO LOG_TABLE
      VALUES(SEQ_LOG.NEXTVAL, 'ORG_TABLE', 'UPDATE', 
         :OLD.OTCONTENT||'>'||:NEW.OTCONTENT, SYSDATE);
   ELSIF DELETING THEN -- DELETE 작업 이라면
      INSERT INTO LOG_TABLE
      VALUES(SEQ_LOG.NEXTVAL, 'ORG_TABLE', 'DELETE', :OLD.OTNO, SYSDATE);   
   END IF;
END;

-- ORG_TABLE에 INSERT
INSERT INTO ORG_TABLE VALUES(4, '컨텐츠4');
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;

-- ORG_TABLE에 UPDATE
UPDATE ORG_TABLE SET OTCONTENT='최종최종수정컨텐츠4' WHERE OTNO=4;
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;

-- ORG_TABLE에 DELETE
DELETE ORG_TABLE WHERE OTNO=4;
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;


-- TRIGGER를 활용한 보안 
CREATE OR REPLACE TRIGGER SECURE_TRIGGER
BEFORE
INSERT OR UPDATE OR DELETE ON ORG_TABLE
FOR EACH ROW
BEGIN
   IF INSERTING THEN
      RAISE_APPLICATION_ERROR(-20777, 'ORG_TABLE 데이터 입력 금지!');
   ELSIF UPDATING THEN
      RAISE_APPLICATION_ERROR(-20778, 'ORG_TABLE 데이터 수정 금지!');   
   ELSIF DELETING THEN
      RAISE_APPLICATION_ERROR(-20779, 'ORG_TABLE 데이터 삭제 금지!');   
   END IF;
END;

-- ORG_TABLE에 INSERT
INSERT INTO ORG_TABLE VALUES(5, '컨텐츠5');
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;

-- ORG_TABLE에 UPDATE
UPDATE ORG_TABLE SET OTCONTENT='수정컨텐츠1' WHERE OTNO=1;
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;

-- ORG_TABLE에 DELETE
DELETE ORG_TABLE WHERE OTNO=1;
COMMIT;
SELECT * FROM ORG_TABLE;
SELECT * FROM BK_TABLE;
SELECT * FROM LOG_TABLE;

-- 트리거 활성화 / 비활성화
ALTER TRIGGER SECURE_TRIGGER DISABLE; -- 비활성화
ALTER TRIGGER SECURE_TRIGGER ENABLE; -- 활성화

-- 테이블과 관련된 모든 트리거 활성화 / 비활성화
ALTER TABLE ORG_TABLE DISABLE ALL TRIGGERS; -- ORG_TABLE 관련된 모든 트리거 비활성화
ALTER TABLE ORG_TABLE ENABLE ALL TRIGGERS; -- ORG_TABLE 관련된 모든 트리거 활성화

-- 트리거 조회
SELECT * FROM USER_TRIGGERS;























