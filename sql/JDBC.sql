CREATE TABLE PERSON(
	PID NUMBER PRIMARY KEY,
	PNAME NVARCHAR2(200) NOT NULL,
	PAGE NUMBER CHECK (PAGE>0)
);

CREATE SEQUENCE SEQ_PERSON;

SELECT * FROM PERSON;

CREATE OR REPLACE PROCEDURE CHANGENAME(
	P_PID IN NUMBER, P_PNAME IN OUT NVARCHAR2
)
IS
BEGIN
	
	UPDATE PERSON
	SET PNAME = P_PNAME
	WHERE PID = P_PID;

	SELECT PNAME
	INTO P_PNAME
	FROM PERSON
	WHERE PID = P_PID;
	
END;

CREATE OR REPLACE FUNCTION GETNAME(P_PID IN NUMBER)
RETURN NVARCHAR2
IS
	V_PNAME PERSON.PNAME%TYPE;
BEGIN
	
	SELECT PNAME
	INTO V_PNAME
	FROM PERSON
	WHERE PID = P_PID;
	
	RETURN V_PNAME;
	
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN '해당 PID 없음!';
	
END;

CREATE TABLE STUDENT(
	STNO NUMBER PRIMARY KEY,
	STNAME VARCHAR2(20) NOT NULL,
	STEMAIL VARCHAR2(200),
	STPHONE VARCHAR2(20)
);

CREATE SEQUENCE SEQ_STUDENT;

SELECT * FROM STUDENT;

-- 한 행의 데이터를 입력하는 프로시져 PROC_INSERT_STUDENT

CREATE OR REPLACE PROCEDURE PROC_INSERT_STUDENT(
	P_STNAME VARCHAR2, P_STEMAIL VARCHAR2, P_STPHONE VARCHAR2
)
IS
BEGIN
	
	INSERT INTO STUDENT
	VALUES(SEQ_STUDENT.NEXTVAL, P_STNAME, P_STEMAIL, P_STPHONE);

END;


-- STNO를 입력하면 이름을 반환하는 함수 FUNC_GET_STNAME

CREATE OR REPLACE FUNCTION FUNC_GET_STNAME(
	P_STNO IN NUMBER
) RETURN VARCHAR2
IS
	V_NAEM STUDENT.STNAME%TYPE;
BEGIN
	SELECT STNAME
	INTO V_NAEM
	FROM STUDENT
	WHERE STNO = P_STNO;
	RETURN V_NAEM;
END;

CREATE TABLE LOB_STORAGE (
	LID NUMBER PRIMARY KEY,
	FILE_NAME NVARCHAR2(200),
	BLOB_DATA BLOB,
	CLOB_DATA CLOB
);

CREATE SEQUENCE SEQ_LOB_STORAGE;

SELECT * FROM LOB_STORAGE;

CREATE TABLE TODO(
	TDNO NUMBER PRIMARY KEY,
	TDWRITER NVARCHAR2(200) NOT NULL,
	TDCONTENT CLOB,
	TDDATE TIMESTAMP DEFAULT SYSTIMESTAMP,
	TDYN CHAR(1) DEFAULT 'N' CHECK (TDYN IN ('Y', 'N'))
);

CREATE SEQUENCE SEQ_TODO;
DROP SEQUENCE SEQ_TODO;
DELETE TODO; 
SELECT * FROM TODO;
