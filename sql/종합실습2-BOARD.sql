-- 종합실습2-BOARD.sql

/*
1. 계정생성 : BOARD/BOARD 계정 생성하고 CONNECT, RESOURCE 롤을 부여
CMD > SQLPLUS CONN AS SYSDBA
SQLPLUS > CREATE USER BOARD IDENTIFIED BY BOARD;
SQLPLUS > GRANT CONNECT, RESOURCE TO BOARD;


2. DBEAVER에 BOARD 커넥션 생성
*/

-- 3. 데이터베이스 설계 : ERWIN, 논리/물리 모델 설계, BOARD.ERWIN

-- 1) 회원테이블 (MEMBER)
--    : 회원아이디(MID), 비밀번호(MPASS), 회원명(MNAME), 등록일시(MREGDATE), 삭제여부(MDELYN)

-- 2) 게시판테이블 (BOARD) 
--    : 게시판아이디(BID), 게시판명(BNAME), 등록일시(BREGDATE), 삭제여부(BDELYN)

-- 3) 게시물테이블 (ARTICLE) 
--    : 게시물아이디(AID), 제목(ATITLE), 내용(ACONTENT), 등록일시(AREGDATE), 
--      조회수(ACOUNT), 첨부파일수(AFCOUNT), 게시판아이디(BID), 회원아이디(MID), 삭제여부(ADELYN)

-- 4) 댓글테이블 (REPLY) 
--    : 댓글아이디(RID), 내용(RCONTENT), 등록일시(RREGDATE), 게시물아이디(AID),
--      회원아이디(MID), 삭제여부(RDELYN)

-- 5) 파일테이블 (AFILE)
--    : 파일아이디(AFID), 서버파일명(AFSFNAME), 클라이언트파일명(AFCFNAME), 등록일시(AFREGDATE),
--      게시물아이디(AID), 삭제여부(AFDELYN)

-- 4. DEEAVER에서 테이블/시퀀스 생성
-- 테이블 5개, 시퀀스 4개
-- 시퀀스명은 SEQ_테이블명

CREATE TABLE MEMBER(
	MID VARCHAR2(50) PRIMARY KEY,
	MPASS VARCHAR2(200) NOT NULL,
	MNAME NVARCHAR2(200) NOT NULL,
	MREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
	MDELYN CHAR(1) DEFAULT 'N' CHECK (MDELYN IN ('N', 'Y')) NOT NULL
);

CREATE TABLE BOARD(
	BID NUMBER PRIMARY KEY,
	BNAME NVARCHAR2(200) NOT NULL,
	BREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
	BDELYN CHAR(1) DEFAULT 'N' CHECK (BDELYN IN ('N', 'Y')) NOT NULL
);

CREATE TABLE REPLY(
	RID NUMBER PRIMARY KEY,
	RCONTENT NVARCHAR2(2000) NOT NULL,
	RREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
	RDELYN CHAR(1) DEFAULT 'N' CHECK (RDELYN IN ('N', 'Y')) NOT NULL,
	AID NUMBER REFERENCES ARTICLE(AID) ON DELETE CASCADE,
    MID VARCHAR2(20) REFERENCES MEMBER(MID) ON DELETE CASCADE
);

CREATE TABLE ARTICLE(
	AID NUMBER PRIMARY KEY,
    ATITLE NVARCHAR2(1000) NOT NULL,
    ACONTENT NVARCHAR2(2000),
    AREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    ACOUNT NUMBER DEFAULT 0 NOT NULL,
    AFCOUNT NUMBER DEFAULT 0 NOT NULL,
    ADELYN CHAR(1) DEFAULT 'Y' NOT NULL CHECK (ADELYN IN ('Y', 'N')),
    MID VARCHAR2(20) REFERENCES MEMBER(MID) ON DELETE CASCADE,
    BID NUMBER REFERENCES BOARD(BID) ON DELETE CASCADE
);

CREATE TABLE AFILE(
	AFID NUMBER PRIMARY KEY,
	ASSFNAME NVARCHAR2(500) NOT NULL,
	AFCFNAME NVARCHAR2(500) NOT NULL,
	AFREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
	AFDELYN CHAR(1) DEFAULT 'N' CHECK (AFDELYN IN ('N', 'Y')) NOT NULL,
	AID NUMBER REFERENCES ARTICLE(AID) ON DELETE CASCADE
);

CREATE SEQUENCE SEQ_BOARD;
CREATE SEQUENCE SEQ_REPLY;
CREATE SEQUENCE SEQ_ARTICLE;
CREATE SEQUENCE SEQ_AFILE;

--5. DUMMY DATA 입력

--1) MEMBER 테이블
INSERT INTO MEMBER VALUES('HONG', 'HONG', '홍길동', SYSTIMESTAMP, 'N');
INSERT INTO MEMBER VALUES('KANG', 'KANG', '강감찬', SYSTIMESTAMP, 'N');
INSERT INTO MEMBER VALUES('LEE', 'LEE', '이순신', SYSTIMESTAMP, 'N');
COMMIT;
SELECT * FROM MEMBER;

-- 2) BOARD 테이블
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '자유게시판', SYSTIMESTAMP, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '사진게시판', SYSTIMESTAMP, 'N');
INSERT INTO BOARD VALUES(SEQ_BOARD.NEXTVAL, '공지게시판', SYSTIMESTAMP, 'N');
COMMIT;
SELECT * FROM BOARD;

-- 3) ARTICLE 테이블
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'HONG', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'HONG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'HONG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'KANG', 2);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'KANG', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'LEE', 1);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'LEE', 3);
INSERT INTO ARTICLE VALUES(SEQ_ARTICLE.NEXTVAL, '제목', '내용', SYSTIMESTAMP, 0, 0, 'N', 'LEE', 3);
COMMIT;
SELECT * FROM ARTICLE;

-- 4) REPLY 테이블
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 1, 'HONG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'KANG');
INSERT INTO REPLY VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'KANG');
COMMIT;
SELECT * FROM REPLY;

--5) AFILE 테이블
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 3);
INSERT INTO AFILE VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 3);
COMMIT;
SELECT * FROM AFILE;


-- 6. VIEW 생성
-- INNER, OUTER JOIN 확인하고 생성

-- 1) VW_MA : 회원과 게시물 뷰
-- 회원아이디, 회원명, 게시물아이디, 제목, 내용, 게시물등록일시, 조회수, 첨부파일수

CREATE OR REPLACE VIEW VW_MA
AS
SELECT M.MID, M.MNAME, A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, A.AFCOUNT
FROM MEMBER M, ARTICLE A
WHERE M.MID = A.MID(+);

SELECT * FROM VW_MA;

--2) VW_BA : 게시판과 게시물 뷰
--   게시판아이디, 게시판명, 게시물아이디, 제목, 내용, 게시물등록일시, 조회수, 첨부파일수
CREATE OR REPLACE VIEW VW_BA
AS
SELECT B.BID, B.BNAME, A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, A.AFCOUNT
FROM BOARD B, ARTICLE A
WHERE B.BID = A.BID(+);

SELECT * FROM VW_BA;
   
--3) VW_AR : 게시물과 댓글 뷰 (댓글 없어도 게시물 다 나와야 함)
--   게시물아이디, 제목, 게시물내용, 게시물등록일시, 조회수, 첨부파일수, 댓글아이디, 댓글내용, 댓글등록일시
CREATE OR REPLACE VIEW VW_AR
AS
SELECT A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, A.AFCOUNT, R.RID, R.RCONTENT, R.RREGDATE
FROM ARTICLE A, REPLY R
WHERE A.AID = R.AID(+);

SELECT * FROM VW_AR;

--4) VW_AAF : 게시물과 파일 뷰 (파일 없어도 게시물 다 나와야 함)
--   게시물아이디, 제목, 게시물내용, 게시물등록일시, 조회수, 첨부파일수, 파일아이디, 서버파일명,
--   클라이언트파일명, 파일등록일시
CREATE OR REPLACE VIEW VW_AAF
AS
SELECT A.AID, A.ATITLE, A.ACONTENT, A.AREGDATE, A.ACOUNT, 
	A.AFCOUNT, AF.AFID, AF.ASSFNAME, AF.AFCFNAME, AFREGDATE
FROM ARTICLE A, AFILE AF
WHERE A.AID = AF.AID(+);

SELECT * FROM VW_AAF;
   
--5) VW_PK : 게시판, 게시물, 댓글, 파일 PK들의 뷰
CREATE OR REPLACE VIEW VW_PK
AS
SELECT B.BID, A.AID, R.RID, AF.AFID
FROM BOARD B, ARTICLE A, REPLY R, AFILE AF
WHERE B.BID = A.BID(+) 
	AND A.AID = R.AID(+)
	AND A.AID = AF.AID(+);

SELECT * FROM VW_PK;

-- 7. PROCEDURE 생성

-- 1) 회원아이디를 입력하면 회원이 작성한 게시물 수를 출력하는 PROC_MACOUNT

DROP PROCEDURE PROC_MACOUNT;

CREATE OR REPLACE PROCEDURE PROC_MACOUNT(
	MEMBER_ID VW_MA.MID%TYPE
)
IS
	V_COUNT NUMBER;
BEGIN
	SELECT COUNT(*)
	INTO V_COUNT
	FROM VW_MA
	WHERE MID = MEMBER_ID;
	DBMS_OUTPUT.PUT_LINE('게시물 수: ' || V_COUNT);
END;

BEGIN
	PROC_MACOUNT('HONG');
END;


-- 2) 게시물아이디를 입력하면 게시물 조회수를 1 증가시키는 PROC_ACOUNT

CREATE OR REPLACE PROCEDURE PROC_ACCOUNT(
	ARTICLE_ID ARTICLE.AID%TYPE
)
IS
BEGIN
	UPDATE ARTICLE
	SET ACOUNT = ACOUNT + 1
	WHERE AID = ARTICLE_ID;
END;

SELECT * FROM ARTICLE;

CALL PROC_ACCOUNT(2);

-- 8. FUNCTION 생성

-- 1) 게시물아이디를 입력하면 게시물에 대한 댓글 수를 반환하는 FUNC_REPLYCOUNT

CREATE OR REPLACE FUNCTION FUNC_REPLYCOUNT(
	ARTICLE_ID VW_AR.AID%TYPE
) RETURN NUMBER
IS
	V_RCONENT_CNT NUMBER;
BEGIN
	SELECT COUNT(RCONTENT) 
	INTO V_RCONENT_CNT
	FROM VW_AR
	WHERE AID = ARTICLE_ID;
	RETURN V_RCONENT_CNT;
END;

SELECT FUNC_REPLYCOUNT(2) FROM DUAL;

SELECT * FROM VW_AR;

-- 2) 회원아이디를 입력하면 회원이 작성한 게시물 수와 댓글 수를 반환하는 FUNC_MBRCOUNT

CREATE OR REPLACE TYPE MEM_OBJ AS OBJECT(
	ACOUNT NUMBER,
	RCOUNT NUMBER
);

CREATE OR REPLACE FUNCTION FUNC_MBRCOUNT(
	MEMBER_ID MEMBER.MID%TYPE
) RETURN MEM_OBJ
IS
	V_MEM_OBJ MEM_OBJ;
BEGIN
	V_MEM_OBJ := MEM_OBJ(0, 0);
	SELECT COUNT(A.AID), COUNT(R.RID)
	INTO V_MEM_OBJ.ACOUNT, V_MEM_OBJ.RCOUNT
	FROM MEMBER M, ARTICLE A, REPLY R
	WHERE M.MID = MEMBER_ID
		AND M.MID = A.MID(+) 
		AND A.AID = R.AID(+);
	RETURN V_MEM_OBJ;
END;

SELECT FUNC_MBRCOUNT('HONG') FROM DUAL;

-- 9. TRIGGER 생성

-- 1) 첨부파일테이블에 데이터가 입력되면 게시물테이블의 AFCOUNT를 1 증가시키는 TRG_AFCOUNT


CREATE OR REPLACE TRIGGER TRG_AFCOUNT
AFTER
INSERT ON AFILE
FOR EACH ROW
BEGIN
	IF INSERTING THEN
		UPDATE ARTICLE
		SET AFCOUNT = AFCOUNT + 1
		WHERE AID = :NEW.AID;
	END IF;
END;

INSERT INTO AFILE
VALUES(SEQ_AFILE.NEXTVAL, '서버파일명', '클라이언트파일명', SYSTIMESTAMP, 'N', 2);

SELECT * FROM AFILE;
SELECT * FROM ARTICLE;

-- 2) 댓글이 등록되면 REPLY_BK 테이블에 회원아이디, 회원명, 댓글아이디, 댓글내용, 댓글등록일시를
--     등록하는 TRG_REPLY_BK (REPLY_BK 테이블 생성 필요)

CREATE TABLE REPLY_BK(
	MID VARCHAR2(50) NOT NULL,
	MNAME NVARCHAR2(200) NOT NULL,
	RID NUMBER NOT NULL,
	RCONTENT NVARCHAR2(2000) NOT NULL,
	RREGDATE TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL
);

CREATE OR REPLACE TRIGGER TRG_REPLY_BK
AFTER
INSERT ON REPLY
FOR EACH ROW
DECLARE
		V_MNAME MEMBER.MNAME%TYPE;
BEGIN
	SELECT MNAME
	INTO V_MNAME
	FROM MEMBER
	WHERE MID = :NEW.MID;	
	
	IF INSERTING THEN
		INSERT INTO REPLY_BK
		VALUES(:NEW.MID, V_MNAME, :NEW.RID, :NEW.RCONTENT, SYSTIMESTAMP);
	END IF;
END;

INSERT INTO REPLY
VALUES(SEQ_REPLY.NEXTVAL, '댓글', SYSTIMESTAMP, 'N', 2, 'HONG');

SELECT * FROM REPLY_BK;
SELECT * FROM MEMBER;

-- 10. JOB 생성
-- 10초 간격으로 MEMBER_BK테이블에 MEMBER테이블을 백업하는 JOB_MEMBER_BK
-- (MEMBER_BK 테이블은 MEMBER 테이블 구조를 복사)

-- 권한 부여 (SYSTEM 계정)
-- CMD > SQLPLUS CONN AS SYSDBA
-- SQLPLUS> GRANT CREATE JOB TO BOARD;
-- SQLPLUS> GRANT MANAGE SCHEDULER TO BOARD;
-- SQLPLUS> GRANT EXECUTE ON DBMS_SCHEDULER TO BOARD;

 -- 1)
CREATE TABLE MEMBER_BK
AS
SELECT * FROM MEMBER WHERE 1=-1;

SELECT * FROM MEMBER_BK;

CREATE OR REPLACE PROCEDURE PROC_MEM
IS
BEGIN
	DELETE MEMBER_BK;
	INSERT INTO MEMBER_BK
	SELECT * FROM MEMBER;
END;

DECLARE
	V_JOB_NO NUMBER;
BEGIN
	DBMS_JOB.SUBMIT(
		JOB => V_JOB_NO,
		WHAT => 'PROC_MEM;',
		NEXT_DATE => SYSDATE,
		INTERVAL => 'SYSDATE + 10/60/60/24'
	);
	COMMIT;
END;

INSERT INTO MEMBER
VALUES('CHOI', 'CHOI', '최영', SYSTIMESTAMP, 'N');

SELECT * FROM MEMBER_BK;
SELECT * FROM USER_JOBS;

BEGIN
	DBMS_JOB.REMOVE(21);
	COMMIT;
END

 -- 2)
BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        JOB_NAME => 'JOB_MEMBER_BK',
        JOB_TYPE => 'PLSQL_BLOCK',
        JOB_ACTION =>
            'BEGIN
               DELETE MEMBER_BK;
                INSERT INTO MEMBER_BK SELECT * FROM MEMBER;
                COMMIT;
            END;',
        START_DATE => SYSTIMESTAMP,
        REPEAT_INTERVAL => 'FREQ=SECONDLY; INTERVAL=10',
        ENABLED => TRUE
    );
END;

INSERT INTO MEMBER VALUES('CHOI', 'CHOI', '최영', SYSTIMESTAMP, 'N');
COMMIT;

SELECT * FROM MEMBER_BK;

/*
   오라클 백업과 복원
   
   1. 백업
   EXP BOARD/BOARD@XE FILE=C:\PUB2504\ORACLE\DMP\BOARD.DMP LOG=C:\PUB2504\ORACLE\DMP\BOARD.LOG FULL=Y
   
   2. 복원
   IMP BOARD/BOARD@XE FILE=C:\PUB2504\ORACLE\DMP\BOARD.DMP full=y
   
*/

TRUNCATE TABLE BOARD;

DELETE AFILE;
COMMIT;

SELECT * FROM BOARD;

SELECT * FROM MEMBER;

SELECT * FROM ARTICLE;

SELECT * FROM AFILE;

SELECT * FROM REPLY;


