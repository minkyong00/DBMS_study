-- 프로시져&함수-HR-실습

-- 프로시져 실습

-- 1) 직무명을 입력받아서 해당 직무를 수행하는 직원의 수를 출력하는 PrintEmployeeCountByJob

DROP PROCEDURE PrintEmployeeCountByJob;

CREATE OR REPLACE PROCEDURE PrintEmployeeCountByJob(
	P_JOB_TITLE JOBS.JOB_TITLE%TYPE,
	P_EMP_CNT OUT NUMBER
)
IS
BEGIN
	SELECT COUNT(*)
	INTO P_EMP_CNT
	FROM JOBS J, EMPLOYEES E
	WHERE J.JOB_TITLE = P_JOB_TITLE
		AND J.JOB_ID = E.JOB_ID;
END;

DECLARE
	V_EMP_CNT NUMBER;
BEGIN
	PrintEmployeeCountByJob('Sales Manager', V_EMP_CNT);
	PL('직원의 수: '||V_EMP_CNT);
END;


-- 2) 부서ID와 새로운 부서명을 입력받아서 부서명을 업데이트 하는 UpdateDepartmentName

DROP PROCEDURE UpdateDepartmentName;

CREATE OR REPLACE PROCEDURE UpdateDepartmentName(
	P_DEP_ID DEPARTMENTS.DEPARTMENT_ID%TYPE,
	P_NEW_DEP_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE
)
IS
BEGIN
	UPDATE DEPARTMENTS
	SET DEPARTMENT_NAME = P_NEW_DEP_NAME
	WHERE DEPARTMENT_ID = P_DEP_ID;
END;

BEGIN
	UpdateDepartmentName(90, '새로운 부서명');
END;

SELECT DEPARTMENT_NAME FROM DEPARTMENTS;

-- 3) 직원ID와 월급 인상률을 입력받아 월급을 인상하는 IncreaseEmployeeSalary

CREATE OR REPLACE PROCEDURE IncreaseEmployeeSalary(
	P_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE,
	P_INCREASE_RT NUMBER
)
IS
BEGIN
	UPDATE EMPLOYEES
	SET SALARY = SALARY*P_INCREASE_RT + SALARY
	WHERE EMPLOYEE_ID = P_EMP_ID;
END;

CALL IncreaseEmployeeSalary(100, 0.1);
SELECT SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID =100;

-- 4) 부서ID를 입력받아 해당 부서의 평균 연봉과 관리자의 연봉을 비교해서
--     관리자의 연봉이 부서 평균 연봉보다 큰지 작은지 출력하는 CompareManagerAndDeptAvgSalary

CREATE OR REPLACE PROCEDURE CompareManagerAndDeptAvgSalary(
	P_DEP_ID DEPARTMENTS.DEPARTMENT_ID%TYPE,
	P_DEP_AVG_SAL OUT NUMBER,
	P_MAN_SAL OUT NUMBER
)
IS
BEGIN
	SELECT AVG(NVL(SALARY, 0))
	INTO P_DEP_AVG_SAL
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = P_DEP_ID;

	SELECT AVG(NVL(E.SALARY, 0))
	INTO P_MAN_SAL
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = (
			SELECT MANAGER_ID
			FROM DEPARTMENTS
			WHERE DEPARTMENT_ID = P_DEP_ID
		);
END;

DECLARE
	V_DEP_AVG_SAL NUMBER;
	V_MAN_SAL NUMBER;
BEGIN
	CompareManagerAndDeptAvgSalary(100, V_DEP_AVG_SAL, V_MAN_SAL);
	IF V_DEP_AVG_SAL > V_MAN_SAL
		THEN PL('부서 평균 연봉이 더 높음');
	ELSIF V_DEP_AVG_SAL < V_MAN_SAL THEN PL('관리자 연봉이 더 높음');
	END IF;
END;

-- 5) 부서ID를 입력받아 해당 부서의 직원 풀네임 모두를 출력하는 PrintEmployeeNamesByDept

DROP PROCEDURE PrintEmployeeNamesByDept;

CREATE OR REPLACE PROCEDURE PrintEmployeeNamesByDept(
	P_DEP_ID EMPLOYEES.DEPARTMENT_ID%TYPE
)
IS
BEGIN
	FOR V_DEPT_ROW IN (
		SELECT FIRST_NAME||' '||LAST_NAME FULLNAME
		FROM EMPLOYEES
		WHERE DEPARTMENT_ID = P_DEP_ID;
	)
	LOOP
		PL(V_DEPT_ROW.FULLNAME);
	END LOOP;
END;

CALL PrintEmployeeNamesByDept(30);

-- 함수 실습

-- 1) 직원ID를 입력받아 연봉((SALARY+SALARY*COMMISSION_PCT)*12을 반환하는
--     GetYearlySalary

DROP FUNCTION GetYearlySalary;

CREATE OR REPLACE FUNCTION GetYearlySalary(
	P_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE
) RETURN NUMBER
IS
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_COMM_PCT EMPLOYEES.COMMISSION_PCT%TYPE;
BEGIN
	SELECT SALARY
	INTO V_SAL
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL
		AND EMPLOYEE_ID = P_EMP_ID;
	
	SELECT COMMISSION_PCT
	INTO V_COMM_PCT
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL
		AND EMPLOYEE_ID = P_EMP_ID;

	RETURN (V_SAL+V_SAL*V_COMM_PCT)*12;
END;

SELECT GetYearlySalary(150) FROM DUAL;

-- 2) 직원ID를 입력받아 입사일 기준 현재까지의 근속일수를 반환하는 GetHireDate

CREATE OR REPLACE FUNCTION GetHireDate(
	P_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE
) RETURN NUMBER
IS
	V_HIRE_CNT NUMBER;
BEGIN
	SELECT SYSDATE - HIRE_DATE
	INTO V_HIRE_CNT
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = P_EMP_ID;
	RETURN V_HIRE_CNT;
END;

SELECT GetHireDate(100) FROM DUAL;

-- 3) 직원ID를 입력받아 입력받은 직원의 관리자의 풀네임을 반환하는 GetManagerFullname

CREATE OR REPLACE FUNCTION GetManagerFullname(
	P_EMP_ID EMPLOYEES.EMPLOYEE_ID%TYPE
) RETURN VARCHAR2
IS
	V_FULLNAME VARCHAR2(46);
BEGIN
	SELECT FIRST_NAME||' '||LAST_NAME
	INTO V_FULLNAME
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = (
			SELECT MANAGER_ID
			FROM EMPLOYEES
			WHERE EMPLOYEE_ID = P_EMP_ID
		);
	RETURN V_FULLNAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN '관리자가 없음!';
END;

SELECT GetManagerFullname(110) FROM DUAL;

-- 4) 부서ID를 입력받아 부서의 직원수, 월급합계를 반환하는 GetEmployeeCountSalarySum
DROP FUNCTION GetEmployeeCountSalarySum;

CREATE OR REPLACE TYPE DEPT_OBJ AS OBJECT(
	EMP_CNT NUMBER,
	SAL_SUM NUMBER
);

CREATE OR REPLACE FUNCTION GetEmployeeCountSalarySum(
	P_DEPT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE
) RETURN DEPT_OBJ
IS
	V_DEPT_CNT NUMBER;
	V_SAL_SUM NUMBER;
BEGIN
	SELECT COUNT(*), SUM(NVL(E.SALARY, 0))
	INTO V_DEPT_CNT, V_SAL_SUM
	FROM DEPARTMENTS D, EMPLOYEES E
	WHERE D.DEPARTMENT_ID = P_DEPT_ID
		AND D.DEPARTMENT_ID = E.DEPARTMENT_ID;
	RETURN DEPT_OBJ(V_DEPT_CNT, V_SAL_SUM);
END;

CREATE OR REPLACE FUNCTION GetEmployeeCountSalarySum(
	P_DEPT_ID DEPARTMENTS.DEPARTMENT_ID%TYPE
) RETURN DEPT_OBJ
IS
	V_DEPT_OBJ DEPT_OBJ;
BEGIN
	V_DEPT_OBJ := DEPT_OBJ(0, 0);
	SELECT COUNT(*), SUM(NVL(E.SALARY, 0))
	INTO V_DEPT_OBJ.V_DEPT_CNT, V_DEPT_OBJ.V_SAL_SUM
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID = P_DEPT_ID
	RETURN DEPT_OBJ;
END;

SELECT GetEmployeeCountSalarySum(90) FROM DUAL;


-- 5) 부서ID 2개를 입력받아 두 관리자의 풀네임과 월급의 차를 반환하는 GetManagerSalaryGap

DROP FUNCTION GetManagerSalaryGap;

CREATE OR REPLACE TYPE DEPT_OBJ2 AS OBJECT(
	FULLNAME1 VARCHAR2,
	FULLNAME2 VARCHAR2,
	SALARY_MIUS NUMBER
);

CREATE OR REPLACE FUNCTION GetManagerSalaryGap(
	P_DEP_ID1 DEPARTMENTS.DEPARTMENT_ID%TYPE,
	P_DEP_ID2 DEPARTMENTS.DEPARTMENT_ID%TYPE
) RETURN DEPT_OBJ2
IS
	V_FULLNAME1 VARCHAR2(46);
	V_FULLNAME2 VARCHAR2(46);
	V_SAL1 EMPLOYEES.SALARY%TYPE;
	V_SAL2 EMPLOYEES.SALARY%TYPE;
BEGIN

	SELECT FIRST_NAME||' '||LAST_NAME, SALARY
	INTO V_FULLNAME1, V_SAL1
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = (
		SELECT MANAGER_ID
		FROM DEPARTMENTS
		WHERE DEPARTMENT_ID = P_DEP_ID1
	);
	
	SELECT FIRST_NAME||' '||LAST_NAME, SALARY
	INTO V_FULLNAME2, V_SAL2
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = (
		SELECT MANAGER_ID
		FROM DEPARTMENTS
		WHERE DEPARTMENT_ID = P_DEP_ID2
	);
	
	
	RETURN DEPT_OBJ2(V_FULLNAME1, V_FULLNAME2, (V_SAL1 - V_SAL2));
END;


SELECT GetManagerSalaryGap(50, 60) FROM DUAL;

































